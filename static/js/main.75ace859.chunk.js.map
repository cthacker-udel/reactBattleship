{"version":3,"sources":["index.js"],"names":["Board","props","useState","theCompGuesses","theGuesses","setTheGuesses","theColor","setColor","printOut","event","console","log","guessesArr","guess","target","name","theHitsArr","length","includes","currWins","numWins","updateWins","push","eachname","document","getElementById","className","innerHTML","setGuessesArr","winProcedure","updateHits","numHits","updateHitArr","concat","updateMisses","numMisses","generateSpace","theName","variant","onClick","id","spaces","striped","bordered","hover","size","style","textAlign","height","NavigationButton","show","setShow","margin","display","onHide","scroll","Header","closeButton","Title","Body","href","MainPage","options","getCompGuesses","randNums","x","y","fndPair","Math","floor","random","i","eachpair","compGuess","computerGuess","setComputerGuess","misses","setMisses","hits","setHits","wins","setWins","hitsArr","setHitsArr","guesses","setGuesses","bg","theOptions","setBoardGuesses","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.75ace859.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Offcanvas from 'react-bootstrap/Offcanvas';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\nfunction Board(props){\r\n\r\n    const [theGuesses,setTheGuesses] = useState(props.theCompGuesses);\r\n\r\n    const [theColor,setColor] = useState('outline-primary');\r\n\r\n    const printOut = (event) => {\r\n\r\n        //console.log(event.target.name); // acquire button name that is pressed\r\n        console.log(`guessesArr = ${props.guessesArr}`);\r\n        let guess = event.target.name;\r\n        console.log(`guesses2 = ${theGuesses}`);\r\n        console.log(`the hits arr = ${props.theHitsArr}`);\r\n        if(props.theHitsArr.length === theGuesses.length-1 && !props.theHitsArr.includes(event.target.name) && theGuesses.includes(event.target.name)){\r\n            setColor(\"outline-primary\");\r\n            let currWins = props.numWins+1;\r\n            props.updateWins(currWins);\r\n            props.guessesArr.push(event.target.name);\r\n            for(let eachname of props.guessesArr){\r\n\r\n                document.getElementById(eachname).className = \"btn btn-outline-primary\";\r\n                document.getElementById(eachname).innerHTML = eachname;\r\n\r\n            }\r\n            props.setGuessesArr([]);\r\n            props.winProcedure(setTheGuesses);\r\n            return;\r\n        }\r\n        else if(props.theHitsArr.includes(guess)){\r\n            // has already been hit\r\n            return;\r\n        }\r\n        else if(theGuesses.includes(guess)){\r\n            // valid hit\r\n            console.log(`hit!`);\r\n            document.getElementById(guess).innerHTML = \"HIT\";\r\n            document.getElementById(guess).className = \"btn btn-success\";\r\n            props.updateHits(props.numHits+1);\r\n            props.updateHitArr(props.theHitsArr.concat(guess));\r\n            console.log(`the hits arr = ${props.theHitsArr}`);\r\n        }\r\n        else{\r\n            console.log(`miss!`);\r\n            document.getElementById(guess).innerHTML = \"MISS\";\r\n            document.getElementById(guess).className = \"btn btn-danger\";\r\n            props.updateMisses(props.numMisses+1);\r\n        }\r\n        props.guessesArr.push(event.target.name);\r\n        \r\n    }\r\n\r\n    const generateSpace = (theName) => {\r\n\r\n\r\n        return(\r\n\r\n            <Button name={theName} variant={theColor} onClick={printOut} id={theName}>{theName}</Button>\r\n\r\n        );\r\n\r\n    }\r\n\r\n    const [spaces,setSpaces] = useState(props['theOptions']);\r\n    const [computerChoices,setComputerChoices] = useState('');\r\n\r\n    return(\r\n\r\n        <>\r\n\r\n        <Table striped bordered hover size=\"sm\" id=\"battleshiptable\">\r\n\r\n            <thead>\r\n                <tr style={{textAlign: \"center\"}}>\r\n                    <th>A</th>\r\n                    <th>B</th>\r\n                    <th>C</th>\r\n                    <th>D</th>\r\n                    <th>E</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody style={{textAlign: \"center\"}}>\r\n                <tr style={{height: \"200px\"}}>\r\n                    <td>\r\n                        {generateSpace(spaces[0][0])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[0][1])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[0][2])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[0][3])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[0][4])}\r\n                    </td>\r\n                </tr>\r\n                <tr style={{height: \"200px\"}}>\r\n                    <td>\r\n                        {generateSpace(spaces[1][0])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[1][1])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[1][2])}\r\n                    </td>\r\n                    <td>    \r\n                        {generateSpace(spaces[1][3])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[1][4])}\r\n                    </td>\r\n                </tr>\r\n                <tr style={{height: \"200px\"}}>\r\n                    <td>\r\n                        {generateSpace(spaces[2][0])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[2][1])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[2][2])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[2][3])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[2][4])}\r\n                    </td>\r\n                </tr>\r\n                <tr style={{height: \"200px\"}}>\r\n                    <td>\r\n                        {generateSpace(spaces[3][0])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[3][1])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[3][2])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[3][3])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[3][4])}\r\n                    </td>\r\n                </tr>\r\n                <tr style={{height: \"200px\"}}>\r\n                    <td>\r\n                        {generateSpace(spaces[4][0])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[4][1])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[4][2])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[4][3])}\r\n                    </td>\r\n                    <td>\r\n                        {generateSpace(spaces[4][4])}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n\r\n        </Table>\r\n\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nfunction NavigationButton(){\r\n\r\n    const [show,setShow] = useState(false);\r\n\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    return(\r\n\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}}>\r\n                Main Menu\r\n            </Button>\r\n\r\n            <Offcanvas show={show} onHide={handleClose} scroll={true}>\r\n                <Offcanvas.Header closeButton>\r\n                    <Offcanvas.Title>Main Menu</Offcanvas.Title>\r\n                </Offcanvas.Header>\r\n\r\n                <Offcanvas.Body>\r\n\r\n                    <a href=\"index.html\">Back to Main Page</a>\r\n                    <br />\r\n                    <a href=\"poker.jsx\">To Poker</a>\r\n                    <br />\r\n                    <a href=\"calculator.jsx\">Calculator</a>\r\n                    <br />\r\n                    <a href=\"bootstrapreview.html\">Bootstrap Review</a>\r\n                    <br />\r\n                    <a href=\"fullreviews.html\">Full reviews - Week 1</a>\r\n\r\n                </Offcanvas.Body>\r\n\r\n            </Offcanvas>\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nfunction MainPage(){\r\n\r\n    const theChoices = [['A1','B1','C1','D1','E1'],['A2','B2','C2','D2','E2'],['A3','B3','C3','D3','E3'],['A4','B4','C4','D4','E4'],['A5','B5','C5','D5','E5']];\r\n\r\n    const [options,setOptions] = useState(theChoices);\r\n\r\n    const getCompGuesses = () => {\r\n\r\n        let randNums = [];\r\n        let x = 0;\r\n        let y = 0;\r\n        let fndPair = false;\r\n        do{\r\n            x = Math.floor(Math.random() *(5));\r\n            y = Math.floor(Math.random() *(5));\r\n            for(let i = 0; i < randNums.length; i++){\r\n                let eachpair = randNums[i];\r\n                if(eachpair[0] === x && eachpair[1] === y){\r\n                    fndPair = true;\r\n                    break;\r\n                }\r\n                else{\r\n                    fndPair = false;\r\n                }\r\n            }\r\n            if(fndPair){\r\n                continue;\r\n            }\r\n            else{\r\n                randNums.push([x,y]);\r\n            }\r\n        }while(randNums.length !== 5);\r\n    \r\n        let theGuesses = [];\r\n        for(let eachpair of randNums){\r\n            theGuesses.push(options[eachpair[0]][eachpair[1]]);\r\n        }\r\n        return theGuesses;\r\n    \r\n    }\r\n\r\n    // get computer guesses\r\n\r\n    // default to 5 guesses <--- may add difficulty functionality later on (reset board, regenerate guesses) also perhaps add customizable functionality such as \r\n    // the user determining the board size rather than default 5x5, also maybe add implementation so instead of picking 5 random points separately, they are conjoined\r\n    // together to form a \"ship\"\r\n\r\n    // really odd behavior when using random numbers, they would change from here to being passed to the board, unsure why, and then when I called set hits in the board func,\r\n    // it would edit the random numbers as well\r\n\r\n    const postWin = (setBoardGuesses) => {\r\n\r\n        let guesses = getCompGuesses();\r\n        setComputerGuess(guesses);\r\n        setHitsArr([]);\r\n        setBoardGuesses(guesses);\r\n\r\n    }\r\n\r\n    const compGuess = getCompGuesses();\r\n\r\n    const[computerGuess,setComputerGuess] = useState(compGuess);\r\n\r\n    const [misses,setMisses] = useState(0);\r\n    const [hits,setHits] = useState(0);\r\n    const [wins,setWins] = useState(0);\r\n\r\n    console.log(`wins = ${wins}`);\r\n\r\n    const [hitsArr,setHitsArr] = useState([]);\r\n\r\n    const [guesses,setGuesses] = useState([]);\r\n\r\n    //console.log(`compguess = ${compGuess}`);\r\n\r\n    console.log(`hits = ${hits}`);\r\n\r\n    return(\r\n        <>\r\n            <Row style={{textAlign: \"center\"}}>\r\n                <Col>\r\n\r\n                    <h3><Badge bg=\"primary\" id=\"missesBadge\">Misses : {misses}</Badge></h3>\r\n\r\n                </Col>\r\n                <Col>\r\n\r\n                    <h3><Badge bg=\"primary\" id=\"hitsbadge\">Hits : {hits}</Badge></h3>\r\n\r\n                </Col>\r\n                <Col>\r\n\r\n                    <h3><Badge bg=\"primary\" id=\"sankBadge\">Wins : {wins}</Badge></h3>\r\n\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n\r\n                <Col>\r\n\r\n                <Board theOptions={options} theCompGuesses={computerGuess} updateHits={setHits} updateWins={setWins} updateMisses={setMisses} numHits={hits} numMisses={misses} numWins={wins} updateHitArr={setHitsArr} theHitsArr={hitsArr} winProcedure={postWin} guessesArr={guesses} setGuessesArr={setGuesses}/>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n            <br />\r\n            <br />\r\n            <Row>\r\n                <Col>\r\n\r\n                    <NavigationButton/>\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n        <MainPage />\r\n\r\n    </React.StrictMode>, document.getElementById('root')\r\n\r\n);"],"sourceRoot":""}